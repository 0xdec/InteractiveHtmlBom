"""Subclass of settings_dialog, which is generated by wxFormBuilder."""

import wx
import re
import dialog_base


def pop_error(msg):
    wx.MessageBox(msg, 'Error', wx.OK | wx.ICON_ERROR)


# Implementing settings_dialog
class SettingsDialog(dialog_base.SettingsDialogBase):
    def __init__(self, parent):
        dialog_base.SettingsDialogBase.__init__(self, parent)
        self.html = HtmlSettingsPanel(self.notebook)
        self.general = GeneralSettingsPanel(self.notebook)
        self.extra = ExtraFieldsPanel(self.notebook)
        self.notebook.AddPage(self.html, "Html")
        self.notebook.AddPage(self.general, "General")
        self.notebook.AddPage(self.extra, "Extra fields")
        best_size = self.BestSize
        # hack for some gtk themes that incorrectly calculate best size
        best_size.IncBy(dx=0, dy=30)
        self.SetSize(best_size)
        self.html.OnBoardRotationSlider(None)

    # hack for new wxFormBuilder generating code incompatible with old wxPython
    # noinspection PyMethodOverriding
    def SetSizeHints(self, sz1, sz2):
        self.SetSizeHintsSz(sz1, sz2)

    def OnExit(self, event):
        self.EndModal(wx.ID_CANCEL)

    def OnSaveSettings(self, event):
        # TODO: implement OnSaveSettings
        pass

    def OnGenerateBom(self, event):
        self.EndModal(wx.ID_OK)

    def init(self, extra_fields_box_wildcard):
        pass


# Implementing HtmlSettingsPanelBase
class HtmlSettingsPanel(dialog_base.HtmlSettingsPanelBase):
    def __init__(self, parent):
        dialog_base.HtmlSettingsPanelBase.__init__(self, parent)

    # Handlers for HtmlSettingsPanelBase events.
    def OnBoardRotationSlider(self, event):
        degrees = self.boardRotationSlider.Value * 5
        self.rotationDegreeLabel.LabelText = u"{}\u00B0".format(degrees)


# Implementing GeneralSettingsPanelBase
class GeneralSettingsPanel(dialog_base.GeneralSettingsPanelBase):
    def __init__(self, parent):
        dialog_base.GeneralSettingsPanelBase.__init__(self, parent)

    # Handlers for GeneralSettingsPanelBase events.
    def OnComponentSortOrderUp(self, event):
        selection = self.componentSortOrderBox.Selection
        if selection != wx.NOT_FOUND and selection > 0:
            item = self.componentSortOrderBox.GetString(selection)
            self.componentSortOrderBox.Delete(selection)
            self.componentSortOrderBox.Insert(item, selection - 1)
            self.componentSortOrderBox.SetSelection(selection - 1)

    def OnComponentSortOrderDown(self, event):
        selection = self.componentSortOrderBox.Selection
        size = self.componentSortOrderBox.Count
        if selection != wx.NOT_FOUND and selection < size - 1:
            item = self.componentSortOrderBox.GetString(selection)
            self.componentSortOrderBox.Delete(selection)
            self.componentSortOrderBox.Insert(item, selection + 1)
            self.componentSortOrderBox.SetSelection(selection + 1)

    def OnComponentSortOrderAdd(self, event):
        item = wx.GetTextFromUser(
                "Characters except for A-Z will be ignored.",
                "Add sort order item")
        item = re.sub('[^A-Z]', '', item.upper())
        if item == '':
            return
        found = self.componentSortOrderBox.FindString(item)
        if found != wx.NOT_FOUND:
            self.componentSortOrderBox.SetSelection(found)
            return
        self.componentSortOrderBox.Append(item)
        self.componentSortOrderBox.SetSelection(
                self.componentSortOrderBox.Count - 1)

    def OnComponentSortOrderRemove(self, event):
        selection = self.componentSortOrderBox.Selection
        if selection != wx.NOT_FOUND:
            item = self.componentSortOrderBox.GetString(selection)
            if item == '~':
                pop_error("You can not delete '~' item")
                return
            self.componentSortOrderBox.Delete(selection)
            if self.componentSortOrderBox.Count > 0:
                self.componentSortOrderBox.SetSelection(max(selection - 1, 0))

    def OnComponentBlacklistAdd(self, event):
        item = wx.GetTextFromUser(
                "Characters except for A-Z 0-9 and * will be ignored.",
                "Add blacklist item")
        item = re.sub('[^A-Z0-9*]', '', item.upper())
        if item == '':
            return
        found = self.blacklistBox.FindString(item)
        if found != wx.NOT_FOUND:
            self.blacklistBox.SetSelection(found)
            return
        self.blacklistBox.Append(item)
        self.blacklistBox.SetSelection(
                self.blacklistBox.Count - 1)

    def OnComponentBlacklistRemove(self, event):
        selection = self.blacklistBox.Selection
        if selection != wx.NOT_FOUND:
            self.blacklistBox.Delete(selection)
            if self.blacklistBox.Count > 0:
                self.blacklistBox.SetSelection(max(selection - 1, 0))


# Implementing ExtraFieldsPanelBase
class ExtraFieldsPanel(dialog_base.ExtraFieldsPanelBase):
    def __init__(self, parent):
        dialog_base.ExtraFieldsPanelBase.__init__(self, parent)

    # Handlers for ExtraFieldsPanelBase events.
    def OnExtraFieldsUp(self, event):
        selection = self.extraFieldsList.Selection
        if selection != wx.NOT_FOUND and selection > 0:
            item = self.extraFieldsList.GetString(selection)
            checked = self.extraFieldsList.IsChecked(selection)
            self.extraFieldsList.Delete(selection)
            self.extraFieldsList.Insert(item, selection - 1)
            if checked:
                self.extraFieldsList.Check(selection - 1)
            self.extraFieldsList.SetSelection(selection - 1)

    def OnExtraFieldsDown(self, event):
        selection = self.extraFieldsList.Selection
        size = self.extraFieldsList.Count
        if selection != wx.NOT_FOUND and selection < size - 1:
            item = self.extraFieldsList.GetString(selection)
            checked = self.extraFieldsList.IsChecked(selection)
            self.extraFieldsList.Delete(selection)
            self.extraFieldsList.Insert(item, selection + 1)
            if checked:
                self.extraFieldsList.Check(selection + 1)
            self.extraFieldsList.SetSelection(selection + 1)
